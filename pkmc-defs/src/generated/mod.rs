/// Code inside generated.rs & data inside generated.json is automatically generated by pkmc-generated
pub mod generated;

use serde::Deserialize;
use std::{collections::HashMap, io::Read, ops::RangeInclusive, sync::LazyLock};

#[macro_export]
macro_rules! generated_util_create_basic_enum {
    ($vis:vis $name:ident; $($sub_name:ident),+) => {
        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
        $vis enum $name {
            $(
                $sub_name,
            )+
        }
    };
}

#[derive(Debug, Deserialize)]
pub struct DataBlockState {
    #[serde(default)]
    pub default: bool,
    pub id: i32,
    #[serde(default)]
    pub properties: HashMap<String, String>,
}

#[derive(Debug, Deserialize)]
pub struct DataBlockDefinition {
    pub r#type: String,
}

#[derive(Debug, Deserialize)]
pub struct DataBlock {
    pub definition: DataBlockDefinition,
    #[serde(default)]
    pub properties: HashMap<String, Vec<String>>,
    pub states: Vec<DataBlockState>,
}

#[derive(Debug, Deserialize)]
pub struct RegistriesIDs {
    pub protocol_id: i32,
    pub default: Option<String>,
    pub entries: HashMap<String, i32>,
}

#[derive(Debug, Deserialize)]
pub struct Data {
    pub block: HashMap<String, DataBlock>,
    pub registries: HashMap<String, RegistriesIDs>,
}

impl Data {
    pub fn load() -> Result<Self, std::io::Error> {
        let compressed = include_bytes!("./generated.json.gz");
        let mut decompressed = Vec::new();
        flate2::read::GzDecoder::new(std::io::Cursor::new(&compressed))
            .read_to_end(&mut decompressed)?;
        Ok(serde_json::from_slice(&decompressed)?)
    }
}

pub static DATA: LazyLock<Data> = LazyLock::new(|| Data::load().unwrap());

pub const PALETTED_DATA_BLOCKS_INDIRECT: RangeInclusive<u8> = 4..=8;
// TODO: Autogenerate this value.
pub const PALETTED_DATA_BLOCKS_DIRECT: u8 = 15;
pub const PALETTED_DATA_BIOMES_INDIRECT: RangeInclusive<u8> = 1..=3;
// TODO: Autogenerate this value.
pub const PALETTED_DATA_BIOMES_DIRECT: u8 = 6;
